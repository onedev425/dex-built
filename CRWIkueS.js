import{dt as v,du as E,z as d,dv as k,aK as C,dw as B,dx as S,dy as I,dz as U,dA as T,dB as x,dC as _,dD as q,dE as D,dF as m,dg as F,dG as M,dH as W,dI as O,dJ as N,dK as H,dL as R}from"./assets/index-CyIKZwcA.js";(function(){try{var e=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},n=new Error().stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="399c0280-e806-481c-bf44-af80e52ab941",e._sentryDebugIdIdentifier="sentry-dbid-399c0280-e806-481c-bf44-af80e52ab941")}catch{}})();var u=(e=>(e.Mainnet="Mainnet",e.Testnet="Testnet",e.Signet="Signet",e))(u||{});async function A(e){var a;const n=await(e==null?void 0:e())||((a=window.XverseProviders)==null?void 0:a.BitcoinProvider)||window.BitcoinProvider;if(!n)throw new Error("No Bitcoin wallet installed");return n}var K=(e=>(e.Ordinals="ordinals",e.Payment="payment",e.Stacks="stacks",e))(K||{}),$=async e=>{var o,r;const n=await A(e.getProvider),{purposes:a}=e.payload;if(!a)throw new Error("Address purposes are required");try{const s=v.createUnsecuredToken(e.payload),i=await n.connect(s);(o=e.onFinish)==null||o.call(e,i)}catch(s){console.error("[Connect] Error during address request",s),(r=e.onCancel)==null||r.call(e)}},L=async e=>{var r,s;const n=await A(e.getProvider),{psbtBase64:a,inputsToSign:o}=e.payload;if(!a)throw new Error("A value for psbtBase64 representing the tx hash is required");if(!o)throw new Error("An array specifying the inputs to be signed by the wallet is required");try{const i=v.createUnsecuredToken(e.payload),h=await n.signTransaction(i);(r=e.onFinish)==null||r.call(e,h)}catch(i){console.error("[Connect] Error during sign transaction request",i),(s=e.onCancel)==null||s.call(e)}};function X({addChain:e,config:{covalentApiKey:n,ethplorerApiKey:a,thorswapApiKey:o}}){return async function(r,s){if(!s)throw new Error("Missing Exodus Wallet instance");E({apiKey:o});const{providers:i}=s,h=r.map(async l=>{const p=l===d.Bitcoin?i.bitcoin:new k(i.ethereum,"any"),{address:c,...w}=await z({chain:l,ethplorerApiKey:a,covalentApiKey:n,ethereumWindowProvider:i.ethereum,walletProvider:p});e({...w,chain:l,address:c,getBalance:async(g=!0)=>w.getBalance(c,g),balance:[],walletType:C.EXODUS})});return await Promise.all(h),!0}}var z=async({ethereumWindowProvider:e,walletProvider:n,chain:a,ethplorerApiKey:o,covalentApiKey:r,blockchairApiKey:s,rpcUrl:i,api:h})=>{switch(a){case d.Bitcoin:{const l=_({rpcUrl:i,apiKey:s,apiClient:h});let p="";const c=()=>new Promise(t=>t(n)),w={getProvider:c,payload:{purposes:[K.Payment],message:"Address for receiving and sending payments",network:{type:u.Mainnet}},onFinish:t=>{if(!t.addresses[0])throw Error("No address found");p=t.addresses[0].address},onCancel:()=>{throw Error("Request canceled")}};await $(w);async function g(t){let b;const P={getProvider:c,payload:{message:"Sign transaction",network:{type:u.Mainnet},psbtBase64:t.toBase64(),broadcast:!1,inputsToSign:[{address:p,signingIndexes:t.txInputs.map(y=>y.index)}]},onFinish:y=>{b=q.Psbt.fromBase64(y.psbtBase64)},onCancel:()=>{throw Error("Signature canceled")}};return await L(P),b}return{...l,transfer:t=>l.transfer({...t,signTransaction:g}),address:p}}case d.Arbitrum:case d.Avalanche:case d.Base:case d.BinanceSmartChain:case d.Ethereum:case d.Optimism:case d.Polygon:{if(!e)throw new Error("Requested web3 wallet is not installed");const l=B({chain:a,covalentApiKey:r,ethplorerApiKey:o}),p=S(a),c=n;await c.send("eth_requestAccounts",[]);const w=await c.getSigner(),g=await w.getAddress(),t=I(a)({...l,provider:p,signer:w});try{a!==d.Ethereum&&await U(c,t.getNetworkParams())}catch{throw new Error(`Failed to add/switch ${a} network: ${a}`)}return{address:g,...T({toolbox:t,chainId:x[a],provider:c})}}default:throw new Error(`Unsupported chain: ${a}`)}},G={connectExodusWallet:X};const j={...O,...N,...H,...R};let f;const J=()=>{if(f)return f;const e=D({apis:{},rpcUrls:{},stagenet:m,config:{stagenet:m,covalentApiKey:"ckey_efd77fcec8314503b97bb7667cb",ethplorerApiKey:"freekey",blockchairApiKey:"C___DSXrweUGKTv3bucm2FbHLCiBfPNO",walletConnectProjectId:"f2ec95d515e61deb4f80ead9b4501212",keepkeyConfig:{apiKey:localStorage.getItem("keepkeyApiKey")||"",pairingInfo:{name:"THORSwap",imageUrl:"https://www.thorswap.finance/logo.png",basePath:"swap",url:"https://app.thorswap.finance"}},chainflipBrokerUrl:`${F}/channel`},wallets:{...M,connectCoinbaseWallet:({addChain:n,config:a,rpcUrls:o,apis:r})=>W.connectCoinbaseWallet({addChain:n,config:a,rpcUrls:o,apis:r,coinbaseWalletSettings:{appName:"THORSwap",appLogoUrl:"https://www.thorswap.finance/logo.png",overrideIsMetaMask:!1}}),...G},plugins:j});return f=e,e};export{J as getSwapKitClient};
